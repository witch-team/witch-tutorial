[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "witch-tutorial",
    "section": "",
    "text": "Please find here:\n\nModels: base versions of DICE and RICE50x\nSlides on GAMS and IAMs\nVideos of lectures on GAMS and IAMs\n\n\n\n\n\nTo add a program to the PATH, search in Windows for environment variables and click on the button “Environment Variables” at the bottom of the window that opens up (should be the window of Sytem properties > Advanced tab). Under “User variables” select the “Path” option end edit it; click “New” and paste the address of the folder of the specific software you want to add. This is the address of the .exe file of the program; it is usually found in the main folder of the program or in the bin folder.\n\n\n\nYou can check what is already in your $PATH by running\necho $PATH\nIf the program you’re interested in is not already present, you need to add it. Depending on the macOS version you’re running on your Mac, this can be done via either the bash shell or zsh (z shell). - For older macOS versions (before Catalina): bash (.bashrc or .bash_profile) - For macOS Catalina and later: zsh (.zshrc or .zprofile) You need to edit the right file\nvim ~/.zprofile\nOR\nopen ~/.zprofile\nby adding\n   export $PATH:/path/to/directory\n\n\n\n\n\n\nHomebrew provides a fast way to install programs in MacOS. Learn how to install it from here: https://brew.sh\n\n\n\nYou can always download the latest distribution at https://www.gams.com/download Please make sure to read the release notes https://www.gams.com/latest/docs/RN_MAIN.html\nIf you are installing GAMS from scratch, select in the installation process “Browse for a license file” and select gamslice.txt. If you are updating the license, copy the six lines (from the gamslice.txt file - someone should give it to you) to the clipboard. Then, open GAMS Studio and click on “Help > GAMS Licensing” or “Help > About GAMS”, depending on your version of GAMS Studio. A message box will notify you that a GAMS license has been found on the clipboard. If ‘Yes’ is clicked, the new license will be installed automatically and presented via the “About GAMS” dialog. For more detailed installation instructions, please visit: https://www.gams.com/latest/docs/UG_MAIN.html#UG_INSTALL The full system documentation is provided electronically with the software and also available online at https://www.gams.com/latest/docs\nInclude GAMS in your environment variables. Add the address path of the version you are currently working with. To check if this worked properly, open Windows Command Prompt, type gams and see if it is recognized. (You can do the same thing in Terminal in MacOS)\n\n\n\nInstall the latest version of R and of RStudio. Install Rtools https://cran.rstudio.com/bin/windows/Rtools/ and add it to the environment variables (the bin folder, as in C:/rtools42/mingw64/bin).\n\n\n\nDownload Git for Windows https://git-scm.com/download/win. Install also GitKraken or GitHub Desktop. Add the latter(s) to the environment variables. Remember that if you are a student, you can ask for a student pro account of GitHub; using this to log into GitKraken allows you to download the full version.\nFor MacOS you can use homebrew\nbrew install git\n\n\n\nAfter having downloaded Visual Studio Code, install the “gms” extension to visualize correctly colors in GAMS.\n\n\n\nIn order to have access to the Zeus Cluster you need a VPN server, which can be obtained through the client Open VPN. You can install it for Mac OS X and for Windows following the instructions. You need a licence to use it, which you can ask to the IT team (refer to nicola.sanavio@cmcc.it). They will provide you a link to a shared Google Drive folder where you will find a folder called scc-dmw vpn containing your licence. You will have to download it and extract it, then follow the instructions that appear when you first open Open VPN.\n\nOpen “OpenVPN Connect” program.\nClick to Tab “File”\nDrag and drop your file configuration or browse (should be a .OVPN file)\nSet your profile name and click to add\nEverything should run\n\n\n\n\nOn Windows it is suggested to install it directly from Microsoft Store. Look for Windows Subsystem for Linux or WSL and press “install”. When this is over open Windows Terminal and type\nwsl --install\nIt will open a list of different distribution that you can choose. If you go for Ubuntu you should write wsl --install -d Ubuntu. At the end of the process it should open a Ubuntu window, then ask you for a username and a password for your account (remember them!).\nInstall https://ubuntu.com/tutorials/install-ubuntu-on-wsl2-on-windows-10#1-overview\n\n\n\nhttps://github.com/witch-team/witch\n\n\n\n\n\nClone the witch and the witch-data repositories\nFollowing the instructions in the READme in witch-data, install dvc in the WSL2 subsystem and dvc pull all the files in the witch-data folder\nAgain in WSL2, move in the witch folder and run dvc pull\nOpen RStudio, set the working directory in the witch folder, and run input/translate_witch_data\nOpen GAMStudio or GAMS IDE and run witch\n\nEasier alternative:\n\nClone the witch repository\nLaunch make from the terminal\n\n\n\nSometimes if there has been some structural change or variable names have been changed, the model can take too much time to converge in it calibration. This is because the starting points are too distant to the solution and the solver takes too much time to converge. The convergence algorithm of the dynamic calibration is not working very well sometimes, in particular if some big changes are done with new variables and new interactions. Usually, we solve this convergence problem, by stopping the calibration and restarting it with another starting point than the one provided by default to find a better one. A good choice for the new starting point is the all_data_temp.gdx after few iterations. Then relaunch the calibration with the parameter - -startgdx:\nbsub -q p_gams -n 18 -R \"span[ptile=18]\" -P R000 -J data_witch17/results_ssp2_calib.gdx -K gams run_witch.gms output=ssp2_calib.lst --calibration=1 gdxcompress=1 --n=witch17 --verbose=1 errmsg=1 --startgdx=all_data_temp_ssp2_calib --startboost=1\nOnce you manage to converge, you should commit the new starting point using the files generated by the calibration:\nresults_ssp2_bau.gdx\ndata_witch17/data_tfp_ssp2.gdx\nOverwrite the files in input/data (postfixed by the regional aggregation):\ncp data_witch17/data_tfp_ssp2.gdx input/data/data_tfp_ssp2_witch17.gdx\ncp results_ssp2_bau.gdx input/data/data_results_ssp2_bau_witch17.gdx\nUpdate the information for dvc and commit it in your branch\ndvc add input/data/data_tfp_ssp2_witch17.gdx input/data/data_results_ssp2_bau_witch17.gdx\ngit add input/data/data_results_ssp2_bau_witch17.gdx.dvc input/data/data_tfp_ssp2_witch17.gdx.dvc\ngit commit -m \"update starting points\"\n\nDon’t forget to push the files to the DVC remote drive\ndvc push\n\n\n\n\nwitch-data\n\nCreate an R script that processes the raw data and creates a long csv with column names iso3, year, variable, value\nPut the R script and the source files in a dedicated folder in witch-data. Open the R project witch-datasets.Rproj and run your R script. Let it create the output file\nOpen the terminal, go in the local folder and do dvc add for the input and the output files. A message will be displayed saying to do git add those files.\ngit commit the files just added and git push them\nIn the terminal, go in the witch-data folder and do dvc push. You need to have access to the ‘remote drive’\n\nmake and translate witch data\n\nCopy-paste the .csv file inside witch/input/data\nOpen the terminal, go in the local folder and do dvc add for the .csv file. A message will be displayed saying to git add those files.\ngit commit the files just added and git push them\nCreate a make_data.R script\nIn the terminal, from the witch folder, run\n\nRscript input/translate_witch_data.R --dvc-single\nRunning translate\\_witch\\_data.R from Rstudio might return a dvc error. If it says a specific folder is not editable, run it by writing sudo before.\n\nIf there is an error because one file is not found, go inside the input/data directory from the terminal and run dvc pull [filename.ext].dvc, i.e. writing .dvc after its own extension\n\nwitch. Load the files in a gams file and work with them\n\n\n\n\n\n\nOperations to clone witch and start working in an existing branch\n\ngit clone git@github.com:witch-team/witch.git\ncd witch (enter in the new folder with the clone)\ngit checkout branchname\ndvc pull (while in input/data). If it asks you for an authorization code and pasting the code in the browser yields an error, skip directly to the next point\nmake\n\nIf you need to pull a commit from GitHub do\n\ngit pull\nmake clean (this will remove old data files)\nmake (to run all)\n\nmake data (if you just want to translate WITCH data into usable files)\nmake -B data (useful if you just want to re translate one file, with -B you force the operation)\n\n\nDVC pull fix error\n\n  for FILE in *.dvc; do dvc pull $FILE; done\nWhen doing dvc pull and receiving the error: Is your cache up to date? <https://error.dvc.org/missing-files> loop through every single file in the folder input/data and dvc pull them singularly to have the same result without any error. In case there are subfolders, run the following:\n    for DIR in */;do for FILE in $DIR*.dvc; do dvc pull $FILE; done; done;\n\n\n\nCheck if the files are up to date: git status\nSelect a branch git checkout\nCheck the differences between local and remote: git diff\n\n\n\n\n\nMove between folders: cd\n\ncd/.. to go back one folder\n\nView the content a file: cat\nView the end of a file: tail\nList files in a folder: ls\nMove a file: mv\nCopy a file: cp\nRemove a file: rm\n\n-r when selecting a folder, remove also all subfolders\n-ltrh order by most recent and display last edit\n\nOpen a file: vim\nDate and time of last edit of a file: stat -c %y [filename]\n\n\n\n\n\n\n\nRun WITCH on Zeus\n\n    bsub -n 18 -R \"span[ptile=18]\" -q p_gams -P 0477 gams run_witch.gms\n\nSee the output of the run: bpeek\n\nSee only the last part of the output of the run -f\n\nSee the list of active jobs: bjobs\nKill a job: bkill\n\nAll: bkill 0\nBy ID: bkill [jobid]\n\n\n\n\n\n\nManually copy one (or more) files from/to Zeus:\n\nZeus address: zeus:/users_home/seme/[user]/work/witch/\n\nScp [departure_address\\filename] [destination_address/]\nscp zeus:/users_home/seme/aa1111/work/witch/results_bau.gdx C:\\Users\\asdasd\\Documents\\GitHub\\witch\nUpdate a folder on ZEUS based on the local witch folder: sh sync2zeus.sh (it actually runs: sync -uavzP --exclude=.git --exclude=.Rproj.user --exclude=*.Rproj ../witch zeus:/work/seme/aa1111/witch)\n\n\n\n\n\nOpen the WITCH error file and refresh it every 2 seconds: watch tail errors_ssp2_calib.txt\n\nVisualize more than the default number of lines (e.g. 40) -n 40\n\nExplore gdx files (e.g. WITCH results) in Zeus\n\nIf I want to read for example data_validation.gdx, reading all the different items\n\n gdxdump data_validation.gdx symbols\n\nIf I want to explore a specific item\n\n gdxdump data_validation.gdx Symb=mcost_inv_valid_irena_csp\n\nTo search through the results you can add | less at the end in order to move freely in it\n\n gdxdump data_validation.gdx Symb=mcost_inv_valid_irena_csp | less\n\nYou can also filter the data with grep. Example:\n\ngdxdump all_data_temp_ssp2_bau.gdx symb=MCOST_INV | grep usa | grep elpc_new | grep '.L ' | less\nRsyinc while excluding some files\n\n    rsync -uavzP --exclude=.git --exclude=.Rproj.user --exclude=*.Rproj\n    ../witch zeus:/work/seme/aa11111/witch\n\nLook for for errors in a .lst file opened with vim: /\\*\\*\\*\\*\nLook for for infeasibilities in a .lst file opened with vim: /INFES\nTool to convert a .sh file from dos to unix. Necessary after each Windows edit of the original .sh file. Execute in case of error /bin/sh^M: bad interpreter: No such file or directory\n\ndos2unix [filename]\n\n\n\n\nIf you can write one equation instead of two, do it. Helps very much the solver\nNever go in a new line with a (e.g. multiplicative) *, even if there is a if set [modulename] in front of it"
  }
]